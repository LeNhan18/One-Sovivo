# services/ai_service.py
import os
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import joblib
try:
    import tensorflow as tf
except ImportError:
    tf = None
from sklearn.preprocessing import StandardScaler, OneHotEncoder

class AIService:
    def __init__(self, config):
        self.config = config
        self.model_dir = config.get('MODEL_DIR', './dl_model')
        self.ai_model = None
        self.scaler = None
        self.encoder = None
        self.feature_columns = ['age', 'avg_balance', 'total_flights', 'is_business_flyer_int',
                                'total_nights_stayed', 'total_resort_spending']
        self.models = {}

    def set_models(self, model_classes):
        """Set model classes after initialization"""
        self.models = model_classes

    def is_model_loaded(self):
        """Check if AI model is loaded and ready"""
        return all([self.ai_model, self.scaler, self.encoder])

    def load_model(self):
        """T·∫£i model ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán."""
        try:
            if tf is None:
                print("‚ö†Ô∏è TensorFlow kh√¥ng available, d√πng mock model")
                return self.create_mock_model()
                
            self.ai_model = tf.keras.models.load_model(os.path.join(self.model_dir, 'persona_model.h5'))
            self.scaler = joblib.load(os.path.join(self.model_dir, 'scaler.pkl'))
            self.encoder = joblib.load(os.path.join(self.model_dir, 'encoder.pkl'))
            print(f"‚úÖ ƒê√£ t·∫£i Model AI t·ª´ {self.model_dir}")
            return True
        except (IOError, OSError) as e:
            print(f"‚ö†Ô∏è L·ªói khi t·∫£i model: {e}. T·∫°o mock model...")
            return self.create_mock_model()

    def create_mock_model(self):
        """T·∫°o model m·∫´u n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu"""
        print("üîß T·∫°o Mock Model ƒë·ªÉ demo...")

        # Mock scaler v√† encoder
        self.scaler = StandardScaler()
        self.scaler.mean_ = np.array([35, 100000000, 10, 0.5, 3, 10000000])
        self.scaler.scale_ = np.array([10, 50000000, 8, 0.5, 2, 5000000])

        self.encoder = OneHotEncoder(sparse_output=False)
        self.encoder.categories_ = [np.array(['doanh_nhan', 'gia_dinh', 'nguoi_tre'])]

        # Mock model (s·ª≠ d·ª•ng logic ƒë∆°n gi·∫£n)
        class MockModel:
            def predict(self, X):
                results = []
                for row in X:
                    # Logic ƒë∆°n gi·∫£n d·ª±a tr√™n features
                    if row[1] > 200000000:  # avg_balance > 200M
                        results.append([0.8, 0.1, 0.1])  # doanh_nhan
                    elif row[0] < 30:  # age < 30
                        results.append([0.1, 0.1, 0.8])  # nguoi_tre
                    else:
                        results.append([0.1, 0.8, 0.1])  # gia_dinh
                return np.array(results)

        self.ai_model = MockModel()

        # L∆∞u mock files
        if not os.path.exists(self.model_dir):
            os.makedirs(self.model_dir)
        try:
            joblib.dump(self.scaler, os.path.join(self.model_dir, 'scaler.pkl'))
            joblib.dump(self.encoder, os.path.join(self.model_dir, 'encoder.pkl'))
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u mock files: {e}")
        return True

    def predict_persona(self, input_data):
        """D·ª± ƒëo√°n persona t·ª´ input data"""
        if not all([self.ai_model, self.scaler, self.encoder]):
            return None, 'AI model ch∆∞a ƒë∆∞·ª£c t·∫£i'

        try:
            # Chu·∫©n b·ªã input
            input_df = pd.DataFrame([input_data])[self.feature_columns]
            input_scaled = self.scaler.transform(input_df)

            # D·ª± ƒëo√°n
            predictions = self.ai_model.predict(input_scaled)
            predicted_class = np.argmax(predictions[0])
            persona_names = ['doanh_nhan', 'gia_dinh', 'nguoi_tre']
            predicted_persona = persona_names[predicted_class]
            confidence = float(predictions[0][predicted_class])

            return predicted_persona, None
        except Exception as e:
            return None, f'L·ªói d·ª± ƒëo√°n: {str(e)}'

    def predict_with_achievements(self, input_data):
        """API predict v·ªõi achievements logic"""
        persona, error = self.predict_persona(input_data)
        if error:
            return {'error': error}

        # Build evidence
        evidence = self.build_evidence_from_data(input_data)
        
        # Get recommendations
        recommendations = self.get_recommendations(persona, input_data)

        return {
            'predicted_persona': persona,
            'evidence': evidence,
            'recommendations': recommendations
        }

    def build_evidence_from_data(self, input_data):
        """Build evidence t·ª´ input data"""
        evidences = []
        
        avg_balance = input_data.get('avg_balance', 0) or 0
        total_flights = input_data.get('total_flights', 0) or 0
        is_business_flyer = input_data.get('is_business_flyer_int', 0) or 0
        total_resort_spending = input_data.get('total_resort_spending', 0) or 0

        evidences.append({
            'label': 'S·ªë d∆∞ trung b√¨nh',
            'value': f"{avg_balance:,.0f} VND",
            'ok': avg_balance >= 100_000_000
        })
        evidences.append({
            'label': 'Bay h·∫°ng th∆∞∆°ng gia',
            'value': 'C√≥' if is_business_flyer else 'Kh√¥ng',
            'ok': bool(is_business_flyer)
        })
        evidences.append({
            'label': 'S·ªë chuy·∫øn bay/nƒÉm',
            'value': f"{total_flights} chuy·∫øn",
            'ok': total_flights >= 5
        })
        evidences.append({
            'label': 'Chi ti√™u ngh·ªâ d∆∞·ª°ng',
            'value': f"{total_resort_spending:,.0f} VND",
            'ok': total_resort_spending >= 20_000_000
        })

        return evidences

    def build_evidence(self, profile):
        """Build evidence t·ª´ customer profile"""
        evidences = []
        avg_balance = profile.get('hdbank_summary', {}).get('average_balance', 0) or 0
        is_biz = profile.get('vietjet_summary', {}).get('is_business_flyer', False)
        total_flights = profile.get('vietjet_summary', {}).get('total_flights_last_year', 0) or 0
        resort_spending = profile.get('resort_summary', {}).get('total_spending', 0) or 0

        evidences.append({
            'label': 'S·ªë d∆∞ trung b√¨nh',
            'value': f"{avg_balance:,.0f} VND",
            'ok': avg_balance >= 100_000_000
        })
        evidences.append({
            'label': 'Bay h·∫°ng th∆∞∆°ng gia',
            'value': 'C√≥' if is_biz else 'Kh√¥ng',
            'ok': bool(is_biz)
        })
        evidences.append({
            'label': 'S·ªë chuy·∫øn bay/nƒÉm',
            'value': f"{total_flights} chuy·∫øn",
            'ok': total_flights >= 5
        })
        evidences.append({
            'label': 'Chi ti√™u ngh·ªâ d∆∞·ª°ng',
            'value': f"{resort_spending:,.0f} VND",
            'ok': resort_spending >= 20_000_000
        })

        return evidences

    def get_recommendations(self, predicted_persona, input_data):
        """T·∫°o ƒë·ªÅ xu·∫•t d·ª±a tr√™n persona ƒë∆∞·ª£c d·ª± ƒëo√°n."""
        recommendations = []

        if predicted_persona == 'doanh_nhan':
            recommendations.append({
                'offer_code': 'DN001',
                'title': 'M·ªü th·∫ª HDBank Visa Signature',
                'description': 'T·∫≠n h∆∞·ªüng ƒë·∫∑c quy·ªÅn ph√≤ng ch·ªù s√¢n bay v√† c√°c ∆∞u ƒë√£i golf cao c·∫•p.'
            })
            if input_data.get('total_resort_spending', 0) > 20_000_000:
                recommendations.append({
                    'offer_code': 'DN002',
                    'title': 'G√≥i Ngh·ªâ D∆∞·ª°ng VIP',
                    'description': '∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho kh√°ch h√†ng th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng d·ªãch v·ª• resort.'
                })
        elif predicted_persona == 'gia_dinh':
            recommendations.append({
                'offer_code': 'GD001',
                'title': 'Combo Du l·ªãch H√® Vietjet',
                'description': 'Gi·∫£m gi√° 30% cho c·∫£ gia ƒë√¨nh khi ƒë·∫∑t v√© m√°y bay v√† kh√°ch s·∫°n qua HDBank App.'
            })
        elif predicted_persona == 'nguoi_tre':
            recommendations.append({
                'offer_code': 'NT001',
                'title': 'M·ªü th·∫ª t√≠n d·ª•ng ƒë·∫ßu ti√™n',
                'description': 'B·∫Øt ƒë·∫ßu x√¢y d·ª±ng l·ªãch s·ª≠ t√≠n d·ª•ng c·ªßa b·∫°n v·ªõi th·∫ª HDBank Vietjet Platinum.'
            })

        return recommendations
