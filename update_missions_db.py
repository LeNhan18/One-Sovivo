"""
Script ƒë·ªÉ c·∫≠p nh·∫≠t database v·ªõi h·ªá th·ªëng mission chi ti·∫øt m·ªõi
"""

import mysql.connector
from detailed_missions import DetailedMissionSystem, MissionCategory, MissionLevel, CustomerType
import json
from datetime import datetime

class MissionDatabaseUpdater:
    def __init__(self):
        self.db_config = {
            'host': 'localhost',
            'user': 'root',
            'password': 'nhan1811',
            'database': 'one_sovico'
        }
        self.mission_system = DetailedMissionSystem()
    
    def connect_db(self):
        """K·∫øt n·ªëi database"""
        return mysql.connector.connect(**self.db_config)
    
    def clear_existing_missions(self):
        """X√≥a d·ªØ li·ªáu mission c≈© ƒë·ªÉ c·∫≠p nh·∫≠t m·ªõi"""
        conn = self.connect_db()
        cursor = conn.cursor()
        
        try:
            # X√≥a d·ªØ li·ªáu trong b·∫£ng mission_templates (gi·ªØ l·∫°i c·∫•u tr√∫c b·∫£ng)
            cursor.execute("DELETE FROM mission_templates")
            print("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu mission templates c≈©")
            
            conn.commit()
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu c≈©: {e}")
            conn.rollback()
        finally:
            cursor.close()
            conn.close()
    
    def insert_new_missions(self):
        """Th√™m t·∫•t c·∫£ mission m·ªõi v√†o database v·ªõi c·∫•u tr√∫c b·∫£ng ƒë√£ c√≥"""
        conn = self.connect_db()
        cursor = conn.cursor()
        
        insert_query = """
        INSERT INTO mission_templates 
        (mission_id, title, description, category, level, customer_type, 
         svt_reward, requirements, prerequisites, next_missions, 
         icon, estimated_time, is_active, created_at, updated_at) 
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        
        successful_inserts = 0
        failed_inserts = 0
        
        # Mapping category names
        category_mapping = {
            'welcome': 'onboarding',
            'daily': 'lifestyle', 
            'financial': 'financial',
            'travel': 'travel',
            'social': 'social'
        }
        
        try:
            for mission_id, mission in self.mission_system.mission_templates.items():
                try:
                    # Map category to database enum
                    db_category = category_mapping.get(mission['category'], 'lifestyle')
                    
                    # Determine customer type (take first one if multiple)
                    customer_type = mission['customer_types'][0] if mission.get('customer_types') else 'new'
                    
                    # Chu·∫©n b·ªã d·ªØ li·ªáu requirements
                    requirements_data = {
                        'action_type': mission['action_type'],
                        'target_value': mission['target_value'],
                        'validation_criteria': mission.get('validation_criteria', {}),
                        'instructions': mission.get('instructions', [])
                    }
                    
                    # D·ªØ li·ªáu ƒë·ªÉ insert
                    mission_data = (
                        mission_id,
                        mission['title'],
                        mission['description'],
                        db_category,
                        mission['level'],
                        customer_type,
                        mission['reward_amount'],
                        json.dumps(requirements_data),
                        json.dumps(mission.get('prerequisites', [])),
                        json.dumps([]),  # next_missions - empty for now
                        mission.get('icon', 'üéØ'),
                        mission.get('estimated_time', '5 ph√∫t'),
                        True,  # is_active
                        datetime.now(),
                        datetime.now()
                    )
                    
                    cursor.execute(insert_query, mission_data)
                    successful_inserts += 1
                    print(f"‚úÖ ƒê√£ th√™m mission: {mission['title']}")
                    
                except Exception as e:
                    failed_inserts += 1
                    print(f"‚ùå L·ªói khi th√™m mission {mission_id}: {e}")
            
            conn.commit()
            print(f"\nüìä K·∫æT QU√Å IMPORT:")
            print(f"   ‚Ä¢ Th√†nh c√¥ng: {successful_inserts} missions")
            print(f"   ‚Ä¢ Th·∫•t b·∫°i: {failed_inserts} missions")
            
        except Exception as e:
            print(f"‚ùå L·ªói chung khi import missions: {e}")
            conn.rollback()
        finally:
            cursor.close()
            conn.close()
    
    def verify_missions_imported(self):
        """Ki·ªÉm tra v√† hi·ªÉn th·ªã missions ƒë√£ import"""
        conn = self.connect_db()
        cursor = conn.cursor()
        
        try:
            # ƒê·∫øm t·ªïng s·ªë missions
            cursor.execute("SELECT COUNT(*) FROM mission_templates")
            total_missions = cursor.fetchone()[0]
            
            # ƒê·∫øm theo category
            cursor.execute("""
                SELECT category, COUNT(*) as count 
                FROM mission_templates 
                GROUP BY category 
                ORDER BY count DESC
            """)
            category_counts = cursor.fetchall()
            
            # L·∫•y m·ªôt v√†i mission m·∫´u
            cursor.execute("""
                SELECT mission_id, title, category, svt_reward 
                FROM mission_templates 
                ORDER BY 
                    CASE category 
                        WHEN 'onboarding' THEN 1
                        WHEN 'lifestyle' THEN 2
                        WHEN 'financial' THEN 3
                        WHEN 'travel' THEN 4
                        WHEN 'social' THEN 5
                        ELSE 6
                    END,
                    svt_reward DESC
                LIMIT 10
            """)
            sample_missions = cursor.fetchall()
            
            print(f"\nüìà TH·ªêNG K√ä MISSIONS TRONG DATABASE:")
            print(f"   ‚Ä¢ T·ªïng s·ªë missions: {total_missions}")
            print(f"\nüìã PH√ÇN B·ªê THEO CATEGORY:")
            for category, count in category_counts:
                category_emoji = {
                    'onboarding': 'üöÄ',
                    'lifestyle': 'üóìÔ∏è', 
                    'financial': 'üè¶',
                    'travel': '‚úàÔ∏è',
                    'social': 'ü§ù'
                }.get(category, 'üìù')
                print(f"   {category_emoji} {category.upper()}: {count} missions")
            
            print(f"\nüéØ M·ªòT S·ªê MISSIONS M·∫™U:")
            for mission_id, title, category, reward in sample_missions:
                print(f"   ‚Ä¢ {title} ({category}) - {reward} SVT")
                
        except Exception as e:
            print(f"‚ùå L·ªói khi verify missions: {e}")
        finally:
            cursor.close()
            conn.close()
    
    def create_sample_customer_missions(self, customer_id="2015"):
        """T·∫°o missions m·∫´u cho customer test"""
        conn = self.connect_db()
        cursor = conn.cursor()
        
        try:
            # L·∫•y missions ph√π h·ª£p cho customer m·ªõi
            available_missions = self.mission_system.get_missions_for_customer(
                customer_id, CustomerType.NEW.value, []
            )
            
            # Th√™m v√†o b·∫£ng customer_missions 
            insert_query = """
            INSERT IGNORE INTO customer_missions 
            (customer_id, mission_id, mission_title, mission_category, 
             mission_level, status, svt_reward, created_at) 
            VALUES (%s, %s, %s, %s, %s, 'available', %s, %s)
            """
            
            assigned_count = 0
            for mission in available_missions[:5]:  # Assign 5 missions ƒë·∫ßu ti√™n
                try:
                    # Map category to database enum
                    category_mapping = {
                        'welcome': 'onboarding',
                        'daily': 'lifestyle', 
                        'financial': 'financial',
                        'travel': 'travel',
                        'social': 'social'
                    }
                    db_category = category_mapping.get(mission['category'], 'lifestyle')
                    
                    cursor.execute(insert_query, (
                        customer_id, 
                        mission['id'], 
                        mission['title'],
                        db_category,
                        mission['level'],
                        mission['reward_amount'],
                        datetime.now()
                    ))
                    assigned_count += 1
                except Exception as e:
                    print(f"‚ùå L·ªói khi assign mission {mission['id']}: {e}")
            
            conn.commit()
            print(f"‚úÖ ƒê√£ assign {assigned_count} missions cho customer {customer_id}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o sample customer missions: {e}")
        finally:
            cursor.close()
            conn.close()
    
    def run_full_update(self):
        """Ch·∫°y to√†n b·ªô qu√° tr√¨nh c·∫≠p nh·∫≠t"""
        print("üöÄ B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T H·ªÜ TH·ªêNG MISSION...")
        print("=" * 50)
        
        # B∆∞·ªõc 1: X√≥a d·ªØ li·ªáu c≈©
        print("\n1. X√≥a d·ªØ li·ªáu mission c≈©...")
        self.clear_existing_missions()
        
        # B∆∞·ªõc 2: Th√™m missions m·ªõi
        print("\n2. Import missions m·ªõi...")
        self.insert_new_missions()
        
        # B∆∞·ªõc 3: Verify k·∫øt qu·∫£
        print("\n3. Ki·ªÉm tra k·∫øt qu·∫£...")
        self.verify_missions_imported()
        
        # B∆∞·ªõc 4: T·∫°o sample cho customer test
        print("\n4. T·∫°o missions m·∫´u cho customer test...")
        self.create_sample_customer_missions()
        
        print("\n" + "=" * 50)
        print("üéâ HO√ÄN T·∫§T C·∫¨P NH·∫¨T H·ªÜ TH·ªêNG MISSION!")

if __name__ == "__main__":
    updater = MissionDatabaseUpdater()
    updater.run_full_update()
