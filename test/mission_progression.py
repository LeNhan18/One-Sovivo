# mission_progression.py
# -*- coding: utf-8 -*-
"""
Mission Progression System for One-Sovico Platform
H·ªá th·ªëng nhi·ªám v·ª• ti·∫øn tri·ªÉn t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao cho kh√°ch h√†ng m·ªõi v√† c≈©
"""

import datetime
from enum import Enum
from typing import Dict, List, Optional

class CustomerType(Enum):
    NEW = "new"          # Kh√°ch h√†ng m·ªõi (< 30 ng√†y)
    REGULAR = "regular"  # Kh√°ch h√†ng th∆∞·ªùng (30-365 ng√†y)
    VIP = "vip"          # Kh√°ch h√†ng VIP (> 365 ng√†y)

class MissionLevel(Enum):
    BEGINNER = "beginner"     # C·∫•p ƒë·ªô ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
    INTERMEDIATE = "intermediate"  # C·∫•p ƒë·ªô trung c·∫•p
    ADVANCED = "advanced"     # C·∫•p ƒë·ªô n√¢ng cao
    EXPERT = "expert"         # C·∫•p ƒë·ªô chuy√™n gia

class MissionCategory(Enum):
    ONBOARDING = "onboarding"     # Nhi·ªám v·ª• l√†m quen
    PROFILE = "profile"           # Ho√†n thi·ªán h·ªì s∆°
    FINANCIAL = "financial"       # Giao d·ªãch t√†i ch√≠nh
    TRAVEL = "travel"             # Du l·ªãch & bay
    LIFESTYLE = "lifestyle"       # Phong c√°ch s·ªëng
    SOCIAL = "social"             # T∆∞∆°ng t√°c x√£ h·ªôi
    INVESTMENT = "investment"     # ƒê·∫ßu t∆∞
    LOYALTY = "loyalty"           # L√≤ng trung th√†nh

class MissionProgressionSystem:
    """H·ªá th·ªëng qu·∫£n l√Ω ti·∫øn tri·ªÉn nhi·ªám v·ª•"""
    
    def __init__(self):
        self.mission_trees = self._initialize_mission_trees()
    
    def _initialize_mission_trees(self) -> Dict:
        """Kh·ªüi t·∫°o c√¢y nhi·ªám v·ª• cho t·ª´ng lo·∫°i kh√°ch h√†ng"""
        return {
            CustomerType.NEW: self._get_new_customer_missions(),
            CustomerType.REGULAR: self._get_regular_customer_missions(),
            CustomerType.VIP: self._get_vip_customer_missions()
        }
    
    def _get_new_customer_missions(self) -> Dict:
        """Nhi·ªám v·ª• cho kh√°ch h√†ng m·ªõi - t·∫≠p trung v√†o onboarding"""
        return {
            MissionLevel.BEGINNER: [
                {
                    'id': 'new_welcome',
                    'title': 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Sovico!',
                    'description': 'Ho√†n th√†nh h∆∞·ªõng d·∫´n c∆° b·∫£n c·ªßa ·ª©ng d·ª•ng',
                    'category': MissionCategory.ONBOARDING,
                    'svt_reward': 500,
                    'requirements': {'app_tutorial_completed': True},
                    'next_missions': ['new_profile_basic'],
                    'icon': 'üëã',
                    'estimated_time': '5 ph√∫t'
                },
                {
                    'id': 'new_profile_basic',
                    'title': 'Ho√†n th√†nh th√¥ng tin c∆° b·∫£n',
                    'description': 'ƒêi·ªÅn ƒë·∫ßy ƒë·ªß h·ªç t√™n, tu·ªïi, gi·ªõi t√≠nh v√† th√†nh ph·ªë',
                    'category': MissionCategory.PROFILE,
                    'svt_reward': 300,
                    'requirements': {
                        'name_filled': True,
                        'age_filled': True,
                        'gender_filled': True,
                        'city_filled': True
                    },
                    'next_missions': ['new_first_login'],
                    'icon': 'üë§',
                    'estimated_time': '3 ph√∫t'
                },
                {
                    'id': 'new_first_login',
                    'title': 'ƒêƒÉng nh·∫≠p ƒë·∫ßu ti√™n',
                    'description': 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng v√†o ·ª©ng d·ª•ng',
                    'category': MissionCategory.ONBOARDING,
                    'svt_reward': 200,
                    'requirements': {'login_count': 1},
                    'next_missions': ['new_explore_features'],
                    'icon': 'üîê',
                    'estimated_time': '1 ph√∫t'
                }
            ],
            MissionLevel.INTERMEDIATE: [
                {
                    'id': 'new_explore_features',
                    'title': 'Kh√°m ph√° t√≠nh nƒÉng',
                    'description': 'Truy c·∫≠p √≠t nh·∫•t 3 t√≠nh nƒÉng kh√°c nhau (Profile360, AI Assistant, NFT Passport)',
                    'category': MissionCategory.ONBOARDING,
                    'svt_reward': 400,
                    'requirements': {'features_explored': 3},
                    'next_missions': ['new_first_ai_chat'],
                    'icon': 'üîç',
                    'estimated_time': '10 ph√∫t'
                },
                {
                    'id': 'new_first_ai_chat',
                    'title': 'Tr√≤ chuy·ªán v·ªõi AI l·∫ßn ƒë·∫ßu',
                    'description': 'S·ª≠ d·ª•ng AI Financial Assistant ƒë·ªÉ ƒë·∫∑t c√¢u h·ªèi t√†i ch√≠nh',
                    'category': MissionCategory.ONBOARDING,
                    'svt_reward': 600,
                    'requirements': {'ai_interactions': 1},
                    'next_missions': ['new_profile_advanced'],
                    'icon': 'ü§ñ',
                    'estimated_time': '5 ph√∫t'
                },
                {
                    'id': 'new_profile_advanced',
                    'title': 'Ho√†n thi·ªán h·ªì s∆° n√¢ng cao',
                    'description': 'ƒêi·ªÅn th√™m th√¥ng tin ngh·ªÅ nghi·ªáp v√† s·ªü th√≠ch',
                    'category': MissionCategory.PROFILE,
                    'svt_reward': 500,
                    'requirements': {
                        'job_filled': True,
                        'persona_type_filled': True
                    },
                    'next_missions': ['new_first_transaction'],
                    'icon': 'üìù',
                    'estimated_time': '5 ph√∫t'
                }
            ],
            MissionLevel.ADVANCED: [
                {
                    'id': 'new_first_transaction',
                    'title': 'Giao d·ªãch ƒë·∫ßu ti√™n',
                    'description': 'Th·ª±c hi·ªán giao d·ªãch t√†i ch√≠nh ƒë·∫ßu ti√™n (c√≥ th·ªÉ l√† demo)',
                    'category': MissionCategory.FINANCIAL,
                    'svt_reward': 1000,
                    'requirements': {'transaction_count': 1},
                    'next_missions': ['new_marketplace_visit'],
                    'icon': 'üí≥',
                    'estimated_time': '10 ph√∫t'
                },
                {
                    'id': 'new_marketplace_visit',
                    'title': 'Kh√°m ph√° Marketplace',
                    'description': 'Truy c·∫≠p v√† xem c√°c s·∫£n ph·∫©m trong Marketplace',
                    'category': MissionCategory.LIFESTYLE,
                    'svt_reward': 300,
                    'requirements': {'marketplace_visits': 1},
                    'next_missions': ['new_week_streak'],
                    'icon': 'üõí',
                    'estimated_time': '5 ph√∫t'
                },
                {
                    'id': 'new_week_streak',
                    'title': 'S·ª≠ d·ª•ng ·ª©ng d·ª•ng 7 ng√†y li√™n t·ª•c',
                    'description': 'Duy tr√¨ th√≥i quen s·ª≠ d·ª•ng ·ª©ng d·ª•ng h√†ng ng√†y',
                    'category': MissionCategory.LOYALTY,
                    'svt_reward': 1500,
                    'requirements': {'daily_streak': 7},
                    'next_missions': [],  # T·ªët nghi·ªáp th√†nh regular customer
                    'icon': 'üî•',
                    'estimated_time': '7 ng√†y'
                }
            ]
        }
    
    def _get_regular_customer_missions(self) -> Dict:
        """Nhi·ªám v·ª• cho kh√°ch h√†ng th∆∞·ªùng - t·∫≠p trung v√†o engagement v√† growth"""
        return {
            MissionLevel.BEGINNER: [
                {
                    'id': 'reg_daily_checkin',
                    'title': 'ƒêi·ªÉm danh h√†ng ng√†y',
                    'description': 'ƒêi·ªÉm danh 5 ng√†y trong tu·∫ßn',
                    'category': MissionCategory.LOYALTY,
                    'svt_reward': 800,
                    'requirements': {'weekly_checkins': 5},
                    'next_missions': ['reg_profile_optimization'],
                    'icon': '‚úÖ',
                    'estimated_time': 'H√†ng ng√†y'
                },
                {
                    'id': 'reg_profile_optimization',
                    'title': 'T·ªëi ∆∞u h√≥a h·ªì s∆°',
                    'description': 'C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt v√† ·∫£nh ƒë·∫°i di·ªán',
                    'category': MissionCategory.PROFILE,
                    'svt_reward': 600,
                    'requirements': {
                        'profile_completeness': 80,
                        'avatar_uploaded': True
                    },
                    'next_missions': ['reg_financial_goal'],
                    'icon': 'üéØ',
                    'estimated_time': '10 ph√∫t'
                }
            ],
            MissionLevel.INTERMEDIATE: [
                {
                    'id': 'reg_financial_goal',
                    'title': 'ƒê·∫∑t m·ª•c ti√™u t√†i ch√≠nh',
                    'description': 'Thi·∫øt l·∫≠p m·ª•c ti√™u ti·∫øt ki·ªám ho·∫∑c ƒë·∫ßu t∆∞',
                    'category': MissionCategory.FINANCIAL,
                    'svt_reward': 1000,
                    'requirements': {'financial_goals_set': 1},
                    'next_missions': ['reg_transaction_milestone'],
                    'icon': 'üéØ',
                    'estimated_time': '15 ph√∫t'
                },
                {
                    'id': 'reg_transaction_milestone',
                    'title': 'Ho√†n th√†nh 10 giao d·ªãch',
                    'description': 'Th·ª±c hi·ªán th√†nh c√¥ng 10 giao d·ªãch t√†i ch√≠nh',
                    'category': MissionCategory.FINANCIAL,
                    'svt_reward': 1500,
                    'requirements': {'transaction_count': 10},
                    'next_missions': ['reg_travel_booking'],
                    'icon': 'üí∞',
                    'estimated_time': '1 th√°ng'
                },
                {
                    'id': 'reg_travel_booking',
                    'title': 'ƒê·∫∑t chuy·∫øn bay ƒë·∫ßu ti√™n',
                    'description': 'S·ª≠ d·ª•ng t√≠nh nƒÉng ƒë·∫∑t v√© m√°y bay Vietjet',
                    'category': MissionCategory.TRAVEL,
                    'svt_reward': 2000,
                    'requirements': {'flight_bookings': 1},
                    'next_missions': ['reg_ai_consultation'],
                    'icon': '‚úàÔ∏è',
                    'estimated_time': '20 ph√∫t'
                }
            ],
            MissionLevel.ADVANCED: [
                {
                    'id': 'reg_ai_consultation',
                    'title': 'T∆∞ v·∫•n AI chuy√™n s√¢u',
                    'description': 'S·ª≠ d·ª•ng AI Assistant √≠t nh·∫•t 10 l·∫ßn cho t∆∞ v·∫•n t√†i ch√≠nh',
                    'category': MissionCategory.FINANCIAL,
                    'svt_reward': 1200,
                    'requirements': {'ai_consultations': 10},
                    'next_missions': ['reg_investment_start'],
                    'icon': 'üß†',
                    'estimated_time': '2 tu·∫ßn'
                },
                {
                    'id': 'reg_investment_start',
                    'title': 'B·∫Øt ƒë·∫ßu ƒë·∫ßu t∆∞',
                    'description': 'Th·ª±c hi·ªán kho·∫£n ƒë·∫ßu t∆∞ ƒë·∫ßu ti√™n ho·∫∑c m·ªü t√†i kho·∫£n ƒë·∫ßu t∆∞',
                    'category': MissionCategory.INVESTMENT,
                    'svt_reward': 3000,
                    'requirements': {'investment_accounts': 1},
                    'next_missions': ['reg_social_sharing'],
                    'icon': 'üìà',
                    'estimated_time': '30 ph√∫t'
                },
                {
                    'id': 'reg_social_sharing',
                    'title': 'Chia s·∫ª th√†nh t·ª±u',
                    'description': 'Chia s·∫ª NFT Passport ho·∫∑c th√†nh t·ª±u tr√™n m·∫°ng x√£ h·ªôi',
                    'category': MissionCategory.SOCIAL,
                    'svt_reward': 800,
                    'requirements': {'social_shares': 1},
                    'next_missions': ['reg_mentor_others'],
                    'icon': 'üì±',
                    'estimated_time': '5 ph√∫t'
                }
            ],
            MissionLevel.EXPERT: [
                {
                    'id': 'reg_mentor_others',
                    'title': 'H∆∞·ªõng d·∫´n ng∆∞·ªùi m·ªõi',
                    'description': 'Gi·ªõi thi·ªáu v√† h∆∞·ªõng d·∫´n 3 ng∆∞·ªùi b·∫°n s·ª≠ d·ª•ng ·ª©ng d·ª•ng',
                    'category': MissionCategory.SOCIAL,
                    'svt_reward': 5000,
                    'requirements': {'referrals_successful': 3},
                    'next_missions': [],  # T·ªët nghi·ªáp th√†nh VIP
                    'icon': 'üë•',
                    'estimated_time': '1 th√°ng'
                }
            ]
        }
    
    def _get_vip_customer_missions(self) -> Dict:
        """Nhi·ªám v·ª• cho kh√°ch h√†ng VIP - t·∫≠p trung v√†o advanced features v√† exclusive content"""
        return {
            MissionLevel.EXPERT: [
                {
                    'id': 'vip_portfolio_management',
                    'title': 'Qu·∫£n l√Ω danh m·ª•c ƒë·∫ßu t∆∞',
                    'description': 'S·ª≠ d·ª•ng t√≠nh nƒÉng qu·∫£n l√Ω danh m·ª•c ƒë·∫ßu t∆∞ n√¢ng cao',
                    'category': MissionCategory.INVESTMENT,
                    'svt_reward': 3000,
                    'requirements': {'portfolio_value': 100000000},  # 100M VND
                    'next_missions': ['vip_exclusive_events'],
                    'icon': 'üíé',
                    'estimated_time': '1 gi·ªù'
                },
                {
                    'id': 'vip_exclusive_events',
                    'title': 'Tham gia s·ª± ki·ªán ƒë·ªôc quy·ªÅn',
                    'description': 'Tham d·ª± webinar ho·∫∑c s·ª± ki·ªán d√†nh ri√™ng cho VIP',
                    'category': MissionCategory.LIFESTYLE,
                    'svt_reward': 2500,
                    'requirements': {'exclusive_events_attended': 1},
                    'next_missions': ['vip_advanced_trading'],
                    'icon': 'üé™',
                    'estimated_time': '2 gi·ªù'
                },
                {
                    'id': 'vip_advanced_trading',
                    'title': 'Giao d·ªãch n√¢ng cao',
                    'description': 'Th·ª±c hi·ªán giao d·ªãch v·ªõi gi√° tr·ªã l·ªõn ho·∫∑c s·∫£n ph·∫©m ph·ª©c t·∫°p',
                    'category': MissionCategory.INVESTMENT,
                    'svt_reward': 5000,
                    'requirements': {
                        'large_transactions': 1,
                        'transaction_value_min': 50000000  # 50M VND
                    },
                    'next_missions': ['vip_community_leader'],
                    'icon': 'üèÜ',
                    'estimated_time': '30 ph√∫t'
                },
                {
                    'id': 'vip_community_leader',
                    'title': 'L√£nh ƒë·∫°o c·ªông ƒë·ªìng',
                    'description': 'Tr·ªü th√†nh ng∆∞·ªùi ·∫£nh h∆∞·ªüng trong c·ªông ƒë·ªìng Sovico',
                    'category': MissionCategory.SOCIAL,
                    'svt_reward': 10000,
                    'requirements': {
                        'community_posts': 10,
                        'helpful_answers': 20,
                        'followers': 100
                    },
                    'next_missions': ['vip_brand_ambassador'],
                    'icon': 'üëë',
                    'estimated_time': '3 th√°ng'
                },
                {
                    'id': 'vip_brand_ambassador',
                    'title': 'ƒê·∫°i s·ª© th∆∞∆°ng hi·ªáu Sovico',
                    'description': 'Tr·ªü th√†nh ƒë·∫°i di·ªán ch√≠nh th·ª©c c·ªßa th∆∞∆°ng hi·ªáu',
                    'category': MissionCategory.SOCIAL,
                    'svt_reward': 25000,
                    'requirements': {
                        'ambassador_application': True,
                        'content_creation': 5,
                        'engagement_rate': 0.05  # 5%
                    },
                    'next_missions': [],  # ƒê·ªânh cao c·ªßa h·ªá th·ªëng
                    'icon': 'üåü',
                    'estimated_time': '6 th√°ng'
                }
            ]
        }
    
    def get_customer_type(self, customer_data: Dict) -> CustomerType:
        """X√°c ƒë·ªãnh lo·∫°i kh√°ch h√†ng d·ª±a tr√™n d·ªØ li·ªáu"""
        created_at = customer_data.get('created_at')
        if not created_at:
            return CustomerType.NEW
        
        # T√≠nh s·ªë ng√†y t·ª´ khi t·∫°o t√†i kho·∫£n
        if isinstance(created_at, str):
            created_at = datetime.datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        
        days_since_created = (datetime.datetime.now() - created_at).days
        
        # X√©t th√™m c√°c y·∫øu t·ªë kh√°c
        transaction_count = customer_data.get('transaction_count', 0)
        total_spending = customer_data.get('total_spending', 0)
        
        if days_since_created < 30:
            return CustomerType.NEW
        elif (days_since_created > 365 or 
              transaction_count > 50 or 
              total_spending > 500000000):  # 500M VND
            return CustomerType.VIP
        else:
            return CustomerType.REGULAR
    
    def get_available_missions(self, customer_data: Dict, completed_missions: List[str]) -> List[Dict]:
        """L·∫•y danh s√°ch nhi·ªám v·ª• c√≥ th·ªÉ th·ª±c hi·ªán cho kh√°ch h√†ng"""
        customer_type = self.get_customer_type(customer_data)
        customer_missions = self.mission_trees[customer_type]
        
        available_missions = []
        
        # Duy·ªát qua c√°c c·∫•p ƒë·ªô
        for level, missions in customer_missions.items():
            for mission in missions:
                mission_id = mission['id']
                
                # B·ªè qua nhi·ªám v·ª• ƒë√£ ho√†n th√†nh
                if mission_id in completed_missions:
                    continue
                
                # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
                if self._check_prerequisites(mission, completed_missions):
                    # Ki·ªÉm tra y√™u c·∫ßu c·ª• th·ªÉ
                    if self._check_requirements(mission, customer_data):
                        mission_copy = mission.copy()
                        mission_copy['level'] = level.value
                        mission_copy['customer_type'] = customer_type.value
                        available_missions.append(mission_copy)
        
        return available_missions
    
    def _check_prerequisites(self, mission: Dict, completed_missions: List[str]) -> bool:
        """Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt c·ªßa nhi·ªám v·ª•"""
        # T√¨m c√°c nhi·ªám v·ª• c√≥ next_missions ch·ª©a mission n√†y
        mission_id = mission['id']
        
        # T√¨m t·∫•t c·∫£ missions trong h·ªá th·ªëng
        all_missions = []
        for customer_type_missions in self.mission_trees.values():
            for level_missions in customer_type_missions.values():
                all_missions.extend(level_missions)
        
        # T√¨m prerequisite missions
        prerequisite_missions = []
        for m in all_missions:
            if mission_id in m.get('next_missions', []):
                prerequisite_missions.append(m['id'])
        
        # N·∫øu kh√¥ng c√≥ prerequisite, c√≥ th·ªÉ th·ª±c hi·ªán
        if not prerequisite_missions:
            return True
        
        # Ki·ªÉm tra √≠t nh·∫•t m·ªôt prerequisite ƒë√£ ho√†n th√†nh
        return any(prereq in completed_missions for prereq in prerequisite_missions)
    
    def _check_requirements(self, mission: Dict, customer_data: Dict) -> bool:
        """Ki·ªÉm tra y√™u c·∫ßu c·ª• th·ªÉ c·ªßa nhi·ªám v·ª•"""
        requirements = mission.get('requirements', {})
        
        for req_key, req_value in requirements.items():
            customer_value = customer_data.get(req_key, 0)
            
            if isinstance(req_value, bool):
                if bool(customer_value) != req_value:
                    return False
            elif isinstance(req_value, (int, float)):
                if customer_value < req_value:
                    return False
        
        return True
    
    def get_mission_progress(self, mission_id: str, customer_data: Dict) -> Dict:
        """L·∫•y ti·∫øn ƒë·ªô ho√†n th√†nh nhi·ªám v·ª•"""
        # T√¨m mission
        mission = None
        for customer_type_missions in self.mission_trees.values():
            for level_missions in customer_type_missions.values():
                for m in level_missions:
                    if m['id'] == mission_id:
                        mission = m
                        break
        
        if not mission:
            return {'error': 'Mission not found'}
        
        requirements = mission.get('requirements', {})
        progress = {}
        
        for req_key, req_value in requirements.items():
            customer_value = customer_data.get(req_key, 0)
            
            if isinstance(req_value, bool):
                progress[req_key] = {
                    'current': bool(customer_value),
                    'required': req_value,
                    'completed': bool(customer_value) == req_value
                }
            elif isinstance(req_value, (int, float)):
                progress[req_key] = {
                    'current': customer_value,
                    'required': req_value,
                    'completed': customer_value >= req_value,
                    'percentage': min(100, (customer_value / req_value) * 100) if req_value > 0 else 0
                }
        
        # T√≠nh t·ªïng ti·∫øn ƒë·ªô
        completed_reqs = sum(1 for p in progress.values() if p['completed'])
        total_reqs = len(progress)
        overall_progress = (completed_reqs / total_reqs * 100) if total_reqs > 0 else 0
        
        return {
            'mission_id': mission_id,
            'mission_title': mission['title'],
            'overall_progress': overall_progress,
            'is_completed': overall_progress >= 100,
            'requirements_progress': progress,
            'estimated_time': mission.get('estimated_time', 'Kh√¥ng x√°c ƒë·ªãnh'),
            'svt_reward': mission.get('svt_reward', 0)
        }
    
    def get_next_recommendations(self, customer_data: Dict, completed_missions: List[str]) -> List[Dict]:
        """ƒê·ªÅ xu·∫•t nhi·ªám v·ª• ti·∫øp theo cho kh√°ch h√†ng"""
        available_missions = self.get_available_missions(customer_data, completed_missions)
        
        # S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n
        def mission_priority(mission):
            priority_map = {
                MissionCategory.ONBOARDING.value: 10,
                MissionCategory.PROFILE.value: 9,
                MissionCategory.FINANCIAL.value: 8,
                MissionCategory.TRAVEL.value: 7,
                MissionCategory.LIFESTYLE.value: 6,
                MissionCategory.SOCIAL.value: 5,
                MissionCategory.INVESTMENT.value: 4,
                MissionCategory.LOYALTY.value: 3
            }
            
            category_priority = priority_map.get(mission['category'].value, 0)
            svt_reward = mission.get('svt_reward', 0)
            
            return category_priority * 1000 + svt_reward
        
        available_missions.sort(key=mission_priority, reverse=True)
        
        # Tr·∫£ v·ªÅ top 5 nhi·ªám v·ª• ƒë·ªÅ xu·∫•t
        return available_missions[:5]


# Kh·ªüi t·∫°o h·ªá th·ªëng progression
mission_system = MissionProgressionSystem()


def get_missions_for_customer(customer_id: int) -> Dict:
    """API function ƒë·ªÉ l·∫•y nhi·ªám v·ª• cho kh√°ch h√†ng c·ª• th·ªÉ"""
    try:
        # L·∫•y d·ªØ li·ªáu kh√°ch h√†ng t·ª´ database (s·∫Ω implement trong API)
        customer_data = {
            'customer_id': customer_id,
            'created_at': datetime.datetime.now() - datetime.timedelta(days=15),  # Mock: 15 ng√†y tr∆∞·ªõc
            'transaction_count': 5,
            'total_spending': 10000000,  # 10M VND
            'login_count': 10,
            'ai_interactions': 3,
            'features_explored': 2,
            'profile_completeness': 60,
            # ... th√™m c√°c field kh√°c
        }
        
        # L·∫•y danh s√°ch nhi·ªám v·ª• ƒë√£ ho√†n th√†nh (s·∫Ω l·∫•y t·ª´ database)
        completed_missions = ['new_welcome', 'new_profile_basic']  # Mock data
        
        customer_type = mission_system.get_customer_type(customer_data)
        available_missions = mission_system.get_available_missions(customer_data, completed_missions)
        recommendations = mission_system.get_next_recommendations(customer_data, completed_missions)
        
        return {
            'customer_id': customer_id,
            'customer_type': customer_type.value,
            'available_missions': available_missions,
            'recommended_missions': recommendations,
            'completed_missions': completed_missions,
            'total_completed': len(completed_missions),
            'total_available': len(available_missions)
        }
        
    except Exception as e:
        return {
            'error': str(e),
            'customer_id': customer_id
        }


if __name__ == "__main__":
    # Test h·ªá th·ªëng
    print("üöÄ Testing Mission Progression System...")
    
    # Test v·ªõi kh√°ch h√†ng m·ªõi
    result = get_missions_for_customer(2015)
    print(f"\nüìä K·∫øt qu·∫£ cho kh√°ch h√†ng {result['customer_id']}:")
    print(f"   Lo·∫°i kh√°ch h√†ng: {result['customer_type']}")
    print(f"   Nhi·ªám v·ª• kh·∫£ d·ª•ng: {result['total_available']}")
    print(f"   Nhi·ªám v·ª• ƒë·ªÅ xu·∫•t: {len(result['recommended_missions'])}")
    
    print("\nüéØ Top 3 nhi·ªám v·ª• ƒë·ªÅ xu·∫•t:")
    for i, mission in enumerate(result['recommended_missions'][:3], 1):
        print(f"   {i}. {mission['icon']} {mission['title']}")
        print(f"      üìù {mission['description']}")
        print(f"      üí∞ Th∆∞·ªüng: {mission['svt_reward']} SVT")
        print(f"      ‚è±Ô∏è Th·ªùi gian: {mission['estimated_time']}")
        print()
