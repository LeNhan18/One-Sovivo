"""
H·ªá th·ªëng mission progression chi ti·∫øt theo y√™u c·∫ßu
Bao g·ªìm 5 nh√≥m nhi·ªám v·ª• ch√≠nh: Ch√†o m·ª´ng, H√†ng ng√†y, T√†i ch√≠nh, Du l·ªãch, C·ªông ƒë·ªìng
"""

from enum import Enum
from typing import Dict, List, Optional
import json
from datetime import datetime, timedelta

class MissionCategory(Enum):
    WELCOME = "welcome"           # Nhi·ªám v·ª• ch√†o m·ª´ng
    DAILY = "daily"              # Nhi·ªám v·ª• h√†ng ng√†y/tu·∫ßn
    FINANCIAL = "financial"      # Nhi·ªám v·ª• t√†i ch√≠nh
    TRAVEL = "travel"           # Nhi·ªám v·ª• du l·ªãch
    SOCIAL = "social"           # Nhi·ªám v·ª• c·ªông ƒë·ªìng

class MissionLevel(Enum):
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"
    EXPERT = "expert"

class CustomerType(Enum):
    NEW = "new"
    REGULAR = "regular"
    VIP = "vip"

class DetailedMissionSystem:
    def __init__(self):
        self.mission_templates = self._init_comprehensive_missions()
        
    def _init_comprehensive_missions(self) -> Dict:
        """Initialize all detailed missions according to user requirements"""
        return {
            # ===== 1. NHI·ªÜM V·ª§ CH√ÄO M·ª™NG (D√†nh cho ng∆∞·ªùi d√πng m·ªõi) üöÄ =====
            'complete_profile': {
                'id': 'complete_profile',
                'title': 'Ho√†n th√†nh H·ªì s∆° C√° nh√¢n',
                'description': 'C·∫≠p nh·∫≠t ƒë·∫ßy ƒë·ªß th√¥ng tin c√° nh√¢n (t√™n, ng√†y sinh, SƒêT)',
                'category': MissionCategory.WELCOME.value,
                'level': MissionLevel.BEGINNER.value,
                'reward_amount': 100,
                'reward_currency': 'SVT',
                'prerequisites': [],
                'customer_types': [CustomerType.NEW.value],
                'action_type': 'profile_update',
                'target_value': 1,
                'icon': 'üë§',
                'estimated_time': '5 ph√∫t',
                'instructions': [
                    'Truy c·∫≠p v√†o ph·∫ßn "H·ªì s∆° c√° nh√¢n"',
                    'ƒêi·ªÅn ƒë·∫ßy ƒë·ªß h·ªç t√™n',
                    'Nh·∫≠p ng√†y sinh ch√≠nh x√°c', 
                    'C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i',
                    'L∆∞u th√¥ng tin'
                ],
                'validation_criteria': {
                    'full_name_completed': True,
                    'birth_date_completed': True,
                    'phone_number_completed': True
                }
            },
            
            'link_hdbank': {
                'id': 'link_hdbank',
                'title': 'Li√™n k·∫øt t√†i kho·∫£n HDBank',
                'description': 'K·∫øt n·ªëi t√†i kho·∫£n ng√¢n h√†ng HDBank hi·ªán c√≥ v√†o ·ª©ng d·ª•ng',
                'category': MissionCategory.WELCOME.value,
                'level': MissionLevel.BEGINNER.value,
                'reward_amount': 300,
                'reward_currency': 'SVT',
                'prerequisites': ['complete_profile'],
                'customer_types': [CustomerType.NEW.value],
                'action_type': 'account_link',
                'target_value': 1,
                'icon': 'üè¶',
                'estimated_time': '10 ph√∫t',
                'instructions': [
                    'Truy c·∫≠p "Li√™n k·∫øt t√†i kho·∫£n"',
                    'Ch·ªçn HDBank t·ª´ danh s√°ch ng√¢n h√†ng',
                    'Nh·∫≠p th√¥ng tin t√†i kho·∫£n HDBank',
                    'X√°c th·ª±c OTP',
                    'Ho√†n t·∫•t li√™n k·∫øt'
                ],
                'validation_criteria': {
                    'hdbank_account_linked': True,
                    'account_verified': True
                }
            },
            
            'link_vietjet_skyjoy': {
                'id': 'link_vietjet_skyjoy',
                'title': 'Li√™n k·∫øt t√†i kho·∫£n Vietjet SkyJoy',
                'description': 'K·∫øt n·ªëi t√†i kho·∫£n kh√°ch h√†ng th√¢n thi·∫øt c·ªßa Vietjet',
                'category': MissionCategory.WELCOME.value,
                'level': MissionLevel.BEGINNER.value,
                'reward_amount': 200,
                'reward_currency': 'SVT',
                'prerequisites': ['complete_profile'],
                'customer_types': [CustomerType.NEW.value],
                'action_type': 'vietjet_link',
                'target_value': 1,
                'icon': '‚úàÔ∏è',
                'estimated_time': '8 ph√∫t',
                'instructions': [
                    'V√†o ph·∫ßn "ƒê·ªëi t√°c li√™n k·∫øt"',
                    'Ch·ªçn Vietjet SkyJoy',
                    'Nh·∫≠p th√¥ng tin t√†i kho·∫£n SkyJoy',
                    'X√°c th·ª±c t√†i kho·∫£n',
                    'ƒê·ªìng b·ªô ƒëi·ªÉm th∆∞·ªüng'
                ],
                'validation_criteria': {
                    'vietjet_account_linked': True,
                    'skyjoy_points_synced': True
                }
            },
            
            'first_transaction': {
                'id': 'first_transaction',
                'title': 'Th·ª±c hi·ªán Giao d·ªãch ƒê·∫ßu ti√™n',
                'description': 'D√πng th·∫ª HDBank thanh to√°n cho m·ªôt d·ªãch v·ª• b·∫•t k·ª≥',
                'category': MissionCategory.WELCOME.value,
                'level': MissionLevel.BEGINNER.value,
                'reward_amount': 150,
                'reward_currency': 'SVT',
                'prerequisites': ['link_hdbank'],
                'customer_types': [CustomerType.NEW.value],
                'action_type': 'transaction',
                'target_value': 1,
                'icon': 'üí≥',
                'estimated_time': '15 ph√∫t',
                'instructions': [
                    'S·ª≠ d·ª•ng th·∫ª HDBank ƒë√£ li√™n k·∫øt',
                    'Thanh to√°n cho b·∫•t k·ª≥ d·ªãch v·ª• n√†o',
                    'ƒê·∫£m b·∫£o giao d·ªãch th√†nh c√¥ng',
                    'Ki·ªÉm tra th√¥ng b√°o x√°c nh·∫≠n'
                ],
                'validation_criteria': {
                    'transaction_completed': True,
                    'hdbank_card_used': True,
                    'transaction_amount_min': 10000
                }
            },
            
            # ===== 2. NHI·ªÜM V·ª§ H√ÄNG NG√ÄY / H√ÄNG TU·∫¶N üóìÔ∏è =====
            'daily_login': {
                'id': 'daily_login',
                'title': 'ƒêƒÉng nh·∫≠p m·ªói ng√†y',
                'description': 'M·ªü ·ª©ng d·ª•ng v√† ƒëƒÉng nh·∫≠p h√†ng ng√†y (+10 SVT, th∆∞·ªüng th√™m n·∫øu ƒëƒÉng nh·∫≠p chu·ªói 7 ng√†y)',
                'category': MissionCategory.DAILY.value,
                'level': MissionLevel.BEGINNER.value,
                'reward_amount': 10,
                'reward_currency': 'SVT',
                'bonus_rewards': {
                    '7_day_streak': 70,    # Th∆∞·ªüng th√™m cho 7 ng√†y li√™n ti·∫øp
                    '30_day_streak': 300   # Th∆∞·ªüng th√™m cho 30 ng√†y li√™n ti·∫øp
                },
                'prerequisites': [],
                'customer_types': [CustomerType.NEW.value, CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'daily_login',
                'target_value': 1,
                'is_repeatable': True,
                'reset_frequency': 'daily',
                'icon': 'üì±',
                'estimated_time': '1 ph√∫t',
                'validation_criteria': {
                    'app_opened': True,
                    'user_authenticated': True,
                    'daily_login_recorded': True
                }
            },
            
            'read_financial_news': {
                'id': 'read_financial_news',
                'title': 'ƒê·ªçc tin t·ª©c T√†i ch√≠nh',
                'description': 'ƒê·ªçc m·ªôt b√†i vi·∫øt t·ª´ chuy√™n m·ª•c "Tin t·ª©c & Ph√¢n t√≠ch" trong ·ª©ng d·ª•ng',
                'category': MissionCategory.DAILY.value,
                'level': MissionLevel.BEGINNER.value,
                'reward_amount': 5,
                'reward_currency': 'SVT',
                'prerequisites': [],
                'customer_types': [CustomerType.NEW.value, CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'read_news',
                'target_value': 1,
                'is_repeatable': True,
                'reset_frequency': 'daily',
                'icon': 'üì∞',
                'estimated_time': '5 ph√∫t',
                'instructions': [
                    'Truy c·∫≠p chuy√™n m·ª•c "Tin t·ª©c & Ph√¢n t√≠ch"',
                    'Ch·ªçn m·ªôt b√†i vi·∫øt t√†i ch√≠nh',
                    'ƒê·ªçc √≠t nh·∫•t 80% n·ªôi dung b√†i vi·∫øt',
                    'Ho√†n t·∫•t vi·ªác ƒë·ªçc'
                ],
                'validation_criteria': {
                    'news_article_opened': True,
                    'reading_time_min_seconds': 60,
                    'article_completion_rate': 0.8
                }
            },
            
            'spending_challenge': {
                'id': 'spending_challenge',
                'title': 'Th·ª≠ th√°ch Chi ti√™u',
                'description': 'Gi·ªØ m·ª©c chi ti√™u trong ng√†y d∆∞·ªõi m·ªôt h·∫°n m·ª©c nh·∫•t ƒë·ªãnh',
                'category': MissionCategory.DAILY.value,
                'level': MissionLevel.INTERMEDIATE.value,
                'reward_amount': 20,
                'reward_currency': 'SVT',
                'prerequisites': ['first_transaction'],
                'customer_types': [CustomerType.NEW.value, CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'spending_control',
                'target_value': 1,
                'is_repeatable': True,
                'reset_frequency': 'daily',
                'icon': 'üí∞',
                'estimated_time': '24 gi·ªù',
                'spending_limits': {
                    CustomerType.NEW.value: 500000,      # 500k VNƒê
                    CustomerType.REGULAR.value: 1000000, # 1M VNƒê
                    CustomerType.VIP.value: 2000000      # 2M VNƒê
                },
                'validation_criteria': {
                    'daily_spending_tracked': True,
                    'spending_under_limit': True
                }
            },
            
            # ===== 3. NHI·ªÜM V·ª§ T√ÄI CH√çNH (HDBank & HD Saison) üè¶ =====
            'open_savings_account': {
                'id': 'open_savings_account',
                'title': 'M·ªü S·ªï ti·∫øt ki·ªám Online',
                'description': 'M·ªü m·ªôt s·ªï ti·∫øt ki·ªám m·ªõi v·ªõi gi√° tr·ªã t·ªëi thi·ªÉu 10.000.000 VNƒê',
                'category': MissionCategory.FINANCIAL.value,
                'level': MissionLevel.INTERMEDIATE.value,
                'reward_amount': 1000,
                'reward_currency': 'SVT',
                'prerequisites': ['first_transaction'],
                'customer_types': [CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'open_savings',
                'target_value': 10000000,
                'icon': 'üè¶',
                'estimated_time': '30 ph√∫t',
                'instructions': [
                    'Truy c·∫≠p "D·ªãch v·ª• ng√¢n h√†ng"',
                    'Ch·ªçn "M·ªü s·ªï ti·∫øt ki·ªám online"',
                    'ƒêi·ªÅn th√¥ng tin s·ªï ti·∫øt ki·ªám',
                    'N·∫°p t·ªëi thi·ªÉu 10.000.000 VNƒê',
                    'X√°c nh·∫≠n m·ªü s·ªï'
                ],
                'validation_criteria': {
                    'savings_account_created': True,
                    'initial_deposit_min': 10000000,
                    'account_status_active': True
                }
            },
            
            'maintain_average_balance': {
                'id': 'maintain_average_balance',
                'title': 'Duy tr√¨ S·ªë d∆∞ Trung b√¨nh',
                'description': 'Gi·ªØ s·ªë d∆∞ trung b√¨nh trong t√†i kho·∫£n thanh to√°n tr√™n 50.000.000 VNƒê trong m·ªôt th√°ng',
                'category': MissionCategory.FINANCIAL.value,
                'level': MissionLevel.ADVANCED.value,
                'reward_amount': 500,
                'reward_currency': 'SVT',
                'prerequisites': ['open_savings_account'],
                'customer_types': [CustomerType.VIP.value],
                'action_type': 'maintain_balance',
                'target_value': 50000000,
                'is_repeatable': True,
                'reset_frequency': 'monthly',
                'icon': 'üíé',
                'estimated_time': '30 ng√†y',
                'instructions': [
                    'Duy tr√¨ s·ªë d∆∞ trung b√¨nh h√†ng th√°ng',
                    'Theo d√µi b√°o c√°o s·ªë d∆∞ h√†ng ng√†y',
                    'ƒê·∫£m b·∫£o kh√¥ng r√∫t qu√° nhi·ªÅu ti·ªÅn',
                    'Ki·ªÉm tra b√°o c√°o cu·ªëi th√°ng'
                ],
                'validation_criteria': {
                    'monthly_average_balance_min': 50000000,
                    'balance_tracking_enabled': True
                }
            },
            
            'auto_bill_payment': {
                'id': 'auto_bill_payment',
                'title': 'Thanh to√°n H√≥a ƒë∆°n T·ª± ƒë·ªông',
                'description': 'ƒêƒÉng k√Ω th√†nh c√¥ng d·ªãch v·ª• thanh to√°n t·ª± ƒë·ªông cho h√≥a ƒë∆°n ƒëi·ªán/n∆∞·ªõc/internet',
                'category': MissionCategory.FINANCIAL.value,
                'level': MissionLevel.INTERMEDIATE.value,
                'reward_amount': 250,
                'reward_currency': 'SVT',
                'prerequisites': ['first_transaction'],
                'customer_types': [CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'auto_payment',
                'target_value': 1,
                'icon': '‚ö°',
                'estimated_time': '20 ph√∫t',
                'supported_bills': ['electricity', 'water', 'internet', 'mobile'],
                'instructions': [
                    'V√†o "Thanh to√°n h√≥a ƒë∆°n"',
                    'Ch·ªçn lo·∫°i h√≥a ƒë∆°n (ƒëi·ªán/n∆∞·ªõc/internet)',
                    'Nh·∫≠p th√¥ng tin h√≥a ƒë∆°n',
                    'Thi·∫øt l·∫≠p thanh to√°n t·ª± ƒë·ªông',
                    'X√°c nh·∫≠n ƒëƒÉng k√Ω'
                ],
                'validation_criteria': {
                    'auto_payment_registered': True,
                    'bill_info_verified': True,
                    'payment_schedule_set': True
                }
            },
            
            # ===== 4. NHI·ªÜM V·ª§ DU L·ªäCH & PHONG C√ÅCH S·ªêNG (Vietjet & Resorts) ‚úàÔ∏èüè® =====
            'fly_new_destination': {
                'id': 'fly_new_destination',
                'title': 'Bay ƒë·∫øn m·ªôt ƒêi·ªÉm ƒë·∫øn M·ªõi',
                'description': 'Th·ª±c hi·ªán m·ªôt chuy·∫øn bay ƒë·∫øn m·ªôt th√†nh ph·ªë m√† b·∫°n ch∆∞a t·ª´ng bay ƒë·∫øn v·ªõi Vietjet',
                'category': MissionCategory.TRAVEL.value,
                'level': MissionLevel.INTERMEDIATE.value,
                'reward_amount': 800,
                'reward_currency': 'SVT',
                'prerequisites': ['link_vietjet_skyjoy'],
                'customer_types': [CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'new_destination',
                'target_value': 1,
                'icon': 'üåç',
                'estimated_time': '2-5 gi·ªù bay',
                'popular_destinations': [
                    'H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng', 'Nha Trang', 'Ph√∫ Qu·ªëc',
                    'Bangkok', 'Seoul', 'Tokyo', 'Singapore', 'Kuala Lumpur'
                ],
                'instructions': [
                    'Truy c·∫≠p "ƒê·∫∑t v√© m√°y bay"',
                    'Ch·ªçn ƒëi·ªÉm ƒë·∫øn ch∆∞a t·ª´ng bay',
                    'ƒê·∫∑t v√© th√†nh c√¥ng',
                    'Ho√†n th√†nh chuy·∫øn bay',
                    'Check-in t·∫°i s√¢n bay ƒë√≠ch'
                ],
                'validation_criteria': {
                    'flight_booked': True,
                    'new_destination_confirmed': True,
                    'flight_completed': True,
                    'vietjet_airline_used': True
                }
            },
            
            'upgrade_flight_class': {
                'id': 'upgrade_flight_class',
                'title': 'N√¢ng c·∫•p H·∫°ng v√©',
                'description': 'L·∫ßn ƒë·∫ßu ti√™n tr·∫£i nghi·ªám h·∫°ng v√© Business / SkyBoss',
                'category': MissionCategory.TRAVEL.value,
                'level': MissionLevel.ADVANCED.value,
                'reward_amount': 1500,
                'reward_currency': 'SVT',
                'prerequisites': ['fly_new_destination'],
                'customer_types': [CustomerType.VIP.value],
                'action_type': 'upgrade_class',
                'target_value': 1,
                'icon': 'ü•á',
                'estimated_time': '2-5 gi·ªù bay',
                'class_options': ['Business', 'SkyBoss'],
                'instructions': [
                    'ƒê·∫∑t v√© h·∫°ng Business ho·∫∑c SkyBoss',
                    'Ho·∫∑c n√¢ng c·∫•p t·ª´ h·∫°ng Economy',
                    'Ho√†n th√†nh chuy·∫øn bay',
                    'Tr·∫£i nghi·ªám d·ªãch v·ª• cao c·∫•p'
                ],
                'validation_criteria': {
                    'premium_class_booked': True,
                    'flight_completed': True,
                    'first_time_premium': True
                }
            },
            
            'resort_review': {
                'id': 'resort_review',
                'title': 'Vi·∫øt ƒê√°nh gi√° Resort',
                'description': 'Sau khi ngh·ªâ d∆∞·ª°ng t·∫°i m·ªôt resort trong h·ªá th·ªëng, vi·∫øt m·ªôt b√†i ƒë√°nh gi√° chi ti·∫øt',
                'category': MissionCategory.TRAVEL.value,
                'level': MissionLevel.INTERMEDIATE.value,
                'reward_amount': 500,
                'reward_currency': 'SVT',
                'prerequisites': ['fly_new_destination'],
                'customer_types': [CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'resort_review',
                'target_value': 1,
                'is_repeatable': True,
                'icon': 'üè®',
                'estimated_time': '15 ph√∫t vi·∫øt ƒë√°nh gi√°',
                'review_requirements': {
                    'min_words': 100,
                    'rating_required': True,
                    'photos_min': 3,
                    'categories': ['service', 'location', 'facilities', 'value']
                },
                'instructions': [
                    'Ngh·ªâ d∆∞·ª°ng t·∫°i resort ƒë·ªëi t√°c',
                    'V√†o "ƒê√°nh gi√° d·ªãch v·ª•"',
                    'Vi·∫øt ƒë√°nh gi√° chi ti·∫øt (t·ªëi thi·ªÉu 100 t·ª´)',
                    'ƒê√°nh gi√° theo t·ª´ng ti√™u ch√≠',
                    'ƒêƒÉng ·∫£nh v√† g·ª≠i ƒë√°nh gi√°'
                ],
                'validation_criteria': {
                    'resort_stay_confirmed': True,
                    'review_word_count_min': 100,
                    'rating_provided': True,
                    'photos_uploaded': True
                }
            },
            
            # ===== 5. NHI·ªÜM V·ª§ C·ªòNG ƒê·ªíNG & X√É H·ªòI ü§ù =====
            'refer_friend_success': {
                'id': 'refer_friend_success',
                'title': 'M·ªùi b·∫°n b√® th√†nh c√¥ng',
                'description': 'G·ª≠i link gi·ªõi thi·ªáu v√† b·∫°n b√® c·ªßa b·∫°n ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng (+1,000 SVT cho m·ªói l∆∞·ª£t)',
                'category': MissionCategory.SOCIAL.value,
                'level': MissionLevel.ADVANCED.value,
                'reward_amount': 1000,
                'reward_currency': 'SVT',
                'prerequisites': ['first_transaction'],
                'customer_types': [CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'successful_referral',
                'target_value': 1,
                'is_repeatable': True,
                'icon': 'üë•',
                'estimated_time': '5 ph√∫t + th·ªùi gian b·∫°n b√® ƒëƒÉng k√Ω',
                'bonus_rewards': {
                    '5_friends': 2000,   # Th∆∞·ªüng th√™m khi m·ªùi ƒë∆∞·ª£c 5 b·∫°n
                    '10_friends': 5000   # Th∆∞·ªüng th√™m khi m·ªùi ƒë∆∞·ª£c 10 b·∫°n
                },
                'instructions': [
                    'V√†o "Gi·ªõi thi·ªáu b·∫°n b√®"',
                    'Sao ch√©p link gi·ªõi thi·ªáu',
                    'G·ª≠i link cho b·∫°n b√®',
                    'B·∫°n b√® ƒëƒÉng k√Ω th√†nh c√¥ng',
                    'B·∫°n b√® ho√†n th√†nh giao d·ªãch ƒë·∫ßu ti√™n'
                ],
                'validation_criteria': {
                    'referral_link_shared': True,
                    'friend_registered': True,
                    'friend_first_transaction': True
                }
            },
            
            'share_achievement': {
                'id': 'share_achievement',
                'title': 'Chia s·∫ª Th√†nh t·ª±u',
                'description': 'Chia s·∫ª H·ªô chi·∫øu NFT ho·∫∑c m·ªôt huy hi·ªáu v·ª´a ƒë·∫°t ƒë∆∞·ª£c l√™n m·∫°ng x√£ h·ªôi',
                'category': MissionCategory.SOCIAL.value,
                'level': MissionLevel.INTERMEDIATE.value,
                'reward_amount': 100,
                'reward_currency': 'SVT',
                'prerequisites': ['first_transaction'],
                'customer_types': [CustomerType.REGULAR.value, CustomerType.VIP.value],
                'action_type': 'share_achievement',
                'target_value': 1,
                'is_repeatable': True,
                'icon': 'üì±',
                'estimated_time': '3 ph√∫t',
                'supported_platforms': ['Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'Zalo'],
                'shareable_achievements': ['NFT Passport', 'Badges', 'Level Progress', 'SVT Balance'],
                'instructions': [
                    'ƒê·∫°t ƒë∆∞·ª£c m·ªôt th√†nh t·ª±u b·∫•t k·ª≥',
                    'V√†o "H·ªô chi·∫øu NFT" ho·∫∑c "Huy hi·ªáu"',
                    'Ch·ªçn "Chia s·∫ª"',
                    'Ch·ªçn n·ªÅn t·∫£ng m·∫°ng x√£ h·ªôi',
                    'ƒêƒÉng v√† chia s·∫ª th√†nh c√¥ng'
                ],
                'validation_criteria': {
                    'achievement_earned': True,
                    'social_share_completed': True,
                    'platform_verified': True
                }
            }
        }
    
    def get_missions_for_customer(self, customer_id: str, customer_type: str, completed_missions: List[str] = None) -> List[Dict]:
        """L·∫•y danh s√°ch nhi·ªám v·ª• ph√π h·ª£p cho kh√°ch h√†ng"""
        if completed_missions is None:
            completed_missions = []
            
        available_missions = []
        
        for mission_id, mission in self.mission_templates.items():
            # Ki·ªÉm tra lo·∫°i kh√°ch h√†ng
            if customer_type not in mission['customer_types']:
                continue
                
            # Ki·ªÉm tra nhi·ªám v·ª• ƒë√£ ho√†n th√†nh
            if mission_id in completed_missions and not mission.get('is_repeatable', False):
                continue
                
            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
            prerequisites_met = all(
                prereq in completed_missions 
                for prereq in mission.get('prerequisites', [])
            )
            
            if not prerequisites_met:
                continue
                
            available_missions.append(mission)
        
        # S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n (Welcome > Daily > Financial > Travel > Social)
        priority_order = {
            MissionCategory.WELCOME.value: 1,
            MissionCategory.DAILY.value: 2, 
            MissionCategory.FINANCIAL.value: 3,
            MissionCategory.TRAVEL.value: 4,
            MissionCategory.SOCIAL.value: 5
        }
        
        available_missions.sort(
            key=lambda m: (priority_order.get(m['category'], 6), m['level'])
        )
        
        return available_missions
    
    def get_mission_by_id(self, mission_id: str) -> Optional[Dict]:
        """L·∫•y th√¥ng tin chi ti·∫øt m·ªôt nhi·ªám v·ª•"""
        return self.mission_templates.get(mission_id)
    
    def get_next_recommended_missions(self, customer_id: str, customer_type: str, completed_missions: List[str]) -> List[Dict]:
        """G·ª£i √Ω nhi·ªám v·ª• ti·∫øp theo cho kh√°ch h√†ng"""
        available_missions = self.get_missions_for_customer(customer_id, customer_type, completed_missions)
        
        # ∆Øu ti√™n nhi·ªám v·ª• ch√†o m·ª´ng cho kh√°ch h√†ng m·ªõi
        if customer_type == CustomerType.NEW.value:
            welcome_missions = [m for m in available_missions if m['category'] == MissionCategory.WELCOME.value]
            if welcome_missions:
                return welcome_missions[:3]
        
        # ∆Øu ti√™n nhi·ªám v·ª• h√†ng ng√†y
        daily_missions = [m for m in available_missions if m['category'] == MissionCategory.DAILY.value]
        other_missions = [m for m in available_missions if m['category'] != MissionCategory.DAILY.value]
        
        # Tr·∫£ v·ªÅ t·ªëi ƒëa 5 nhi·ªám v·ª• (2 h√†ng ng√†y + 3 kh√°c)
        recommended = daily_missions[:2] + other_missions[:3]
        return recommended[:5]
    
    def calculate_mission_progress(self, mission_id: str, current_value: float, target_value: float = None) -> Dict:
        """T√≠nh to√°n ti·∫øn ƒë·ªô ho√†n th√†nh nhi·ªám v·ª•"""
        mission = self.get_mission_by_id(mission_id)
        if not mission:
            return None
            
        if target_value is None:
            target_value = mission.get('target_value', 1)
            
        progress_percentage = min(100, (current_value / target_value) * 100)
        is_completed = current_value >= target_value
        
        return {
            'mission_id': mission_id,
            'current_value': current_value,
            'target_value': target_value,
            'progress_percentage': progress_percentage,
            'is_completed': is_completed,
            'reward_amount': mission['reward_amount'] if is_completed else 0
        }
    
    def export_missions_json(self) -> str:
        """Export t·∫•t c·∫£ missions ra JSON ƒë·ªÉ import v√†o database"""
        return json.dumps(self.mission_templates, indent=2, ensure_ascii=False)

# Test function
if __name__ == "__main__":
    mission_system = DetailedMissionSystem()
    
    # Test cho kh√°ch h√†ng m·ªõi
    print("=== MISSIONS FOR NEW CUSTOMER ===")
    new_missions = mission_system.get_missions_for_customer("new_customer", CustomerType.NEW.value)
    for mission in new_missions[:5]:
        print(f"‚Ä¢ {mission['title']} - {mission['reward_amount']} SVT")
    
    print("\n=== RECOMMENDED NEXT MISSIONS ===")
    completed = ['complete_profile', 'link_hdbank']
    recommendations = mission_system.get_next_recommended_missions("customer_123", CustomerType.NEW.value, completed)
    for mission in recommendations:
        print(f"‚Ä¢ {mission['title']} - {mission['reward_amount']} SVT")
        
    print(f"\n=== TOTAL MISSIONS: {len(mission_system.mission_templates)} ===")
